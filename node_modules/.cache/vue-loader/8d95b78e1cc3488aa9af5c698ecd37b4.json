{"remainingRequest":"/home/runner/work/U2_Pensamiento_Algoritmico/U2_Pensamiento_Algoritmico/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Pensamiento_Algoritmico/U2_Pensamiento_Algoritmico/src/views/curso/Tema1.vue?vue&type=template&id=49b6e1ae&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Pensamiento_Algoritmico/U2_Pensamiento_Algoritmico/src/views/curso/Tema1.vue","mtime":1751421072079},{"path":"/home/runner/work/U2_Pensamiento_Algoritmico/U2_Pensamiento_Algoritmico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Algoritmico/U2_Pensamiento_Algoritmico/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Algoritmico/U2_Pensamiento_Algoritmico/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Algoritmico/U2_Pensamiento_Algoritmico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Algoritmico/U2_Pensamiento_Algoritmico/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}